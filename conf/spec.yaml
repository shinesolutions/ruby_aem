aem:
  actions:
    get_login_page:
      api: cq
      operation: getLoginPage
      params:
        required:
      responses:
        200:
          handler: simple
          message: 'Login page retrieved'
    get_aem_health_check:
      api: custom
      operation: getAemHealthCheck
      params:
        required:
        optional:
          tags: '%{tags}'
          combinetagsor: '%{combine_tags_or}'
      responses:
        200:
          handler: json_aem_health_check
          message: 'AEM health check retrieved'
    get_agents:
      api: sling
      operation: getAgents
      params:
        required:
          runmode: '%{run_mode}'
      responses:
        200:
          handler: json_agents
          message: 'Retrieved agents on %{run_mode}'
    get_install_status:
      api: crx
      operation: getInstallStatus
      params:
        required:
      responses:
        200:
          handler: simple
          message: 'Install status retrieved successfully'
    get_crxde_status:
      api: crx
      operation: getCrxdeStatus
      params:
        required:
      responses:
        200:
          handler: simple_true
          message: 'CRXDE is enabled'
        404:
          handler: simple_false
          message: 'CRXDE is disabled'
    get_packages:
      api: crx
      operation: postPackageService
      params:
        required:
          cmd: ls
      responses:
        200:
          handler: xml_package_list
          message: 'All packages list retrieved successfully'
authorizablekeystore:
  responses:
    404:
      handler: simple_error
      message: 'Authorizable keystore not found'
  actions:
    create:
      api: sling
      operation: postAuthorizableKeystore
      params:
        required:
          intermediate_path: '%{intermediate_path}'
          authorizable_id: '%{authorizable_id}'
        optional:
          new_password: '%{password}'
          re_password: '%{password}'
          operation: createStore
      responses:
        200:
          handler: simple
          message: 'Authorizable keystore created'
        201:
          handler: simple
          message: 'Authorizable keystore created'
    change_password:
      api: sling
      operation: postAuthorizableKeystore
      params:
        required:
          intermediate_path: '%{intermediate_path}'
          authorizable_id: '%{authorizable_id}'
        optional:
          current_password: '%{old_password}'
          new_password: '%{new_password}'
          re_password: '%{new_password}'
      responses:
        200:
          handler: simple
          message: 'Authorizable keystore password successfully changed'
    upload:
      api: sling
      operation: postAuthorizableKeystore
      params:
        required:
          intermediate_path: '%{intermediate_path}'
          authorizable_id: '%{authorizable_id}'
        optional:
          new_alias: '%{new_alias}'
          key_store: __FILE_PLAIN__
          key_store_pass: '%{keystore_password}'
          _alias: '%{private_key_alias}'
          key_password: '%{private_key_password}'
      responses:
        200:
          handler: simple
          message: 'Authorizable keystore uploaded'
        201:
          handler: simple
          message: 'Authorizable keystore uploaded'
    download:
      api: sling
      operation: getKeystore
      params:
        required:
          intermediate_path: '%{intermediate_path}'
          authorizable_id: '%{authorizable_id}'
      responses:
        200:
          handler: file_download
          message: 'Authorizable keystore downloaded to %{file_path}'
    delete:
      api: sling
      operation: postNode
      params:
        required:
          path: '%{intermediate_path}/%{authorizable_id}/keystore'
          name: store.p12
        optional:
          operation: delete
      responses:
        200:
          handler: simple
          message: 'Authorizable keystore deleted'
        201:
          handler: simple
          message: 'Authorizable keystore deleted'
        403:
          handler: simple_error
          message: 'Authorizable keystore not found'
    exists:
      api: sling
      operation: getAuthorizableKeystore
      params:
        required:
          intermediate_path: '%{intermediate_path}'
          authorizable_id: '%{authorizable_id}'
      responses:
        200:
          handler: json_authorizable_keystore_exists
          message: 'Authorizable keystore exists'
        404:
          handler: json_authorizable_keystore_exists
          message: 'Authorizable keystore not found'
    info:
      api: sling
      operation: getAuthorizableKeystore
      params:
        required:
          intermediate_path: '%{intermediate_path}'
          authorizable_id: '%{authorizable_id}'
      responses:
        200:
          handler: simple_body
          message: 'Retrieved authorizable keystore info'
bundle:
  responses:
    404:
      handler: simple_error
      message: 'Bundle %{name} not found'
  actions:
    start:
      api: console
      operation: postBundle
      params:
        required:
          name: '%{name}'
          action: start
      responses:
        200:
          handler: simple
          message: 'Bundle %{name} started'
    stop:
      api: console
      operation: postBundle
      params:
        required:
          name: '%{name}'
          action: stop
      responses:
        200:
          handler: simple
          message: 'Bundle %{name} stopped'
certificate:
  actions:
    import:
      api: sling
      operation: postTruststore
      params:
        optional:
          certificate: __FILE_PLAIN__
          key_store_type: jks
      responses:
        200:
          handler: simple
          message: 'Certificate imported'
        201:
          handler: simple
          message: 'Certificate imported'
    delete:
      api: sling
      operation: postTruststore
      params:
        optional:
          remove_alias: '%{cert_alias}'
      responses:
        200:
          handler: simple
          message: 'Certificate %{serial_number} deleted'
    exists:
      api: sling
      operation: getTruststoreInfo
      params:
        required:
      responses:
        200:
          handler: json_certificate_exists
          message: 'Certificate exists'
        404:
          handler: json_certificate_exists
          message: 'Certificate not found'
certificatechain:
  actions:
    import:
      api: sling
      operation: postAuthorizableKeystore
      params:
        required:
          intermediate_path: '%{keystore_intermediate_path}'
          authorizable_id: '%{keystore_authorizable_id}'
        optional:
          _alias: '%{private_key_alias}'
          cert_chain: __FILE_CERTIFICATE__
          pk: __FILE_PRIVATE_KEY__
      responses:
        200:
          handler: simple
          message: 'Certificate chain and private key successfully imported'
        201:
          handler: simple
          message: 'Certificate chain and private key successfully imported'
    delete:
      api: sling
      operation: postAuthorizableKeystore
      params:
        required:
          intermediate_path: '%{keystore_intermediate_path}'
          authorizable_id: '%{keystore_authorizable_id}'
        optional:
          remove_alias: '%{private_key_alias}'
      responses:
        200:
          handler: simple
          message: 'Certificate chain deleted'
    exists:
      api: sling
      operation: getAuthorizableKeystore
      params:
        required:
          intermediate_path: '%{keystore_intermediate_path}'
          authorizable_id: '%{keystore_authorizable_id}'
      responses:
        200:
          handler: json_certificate_chain_exists
          message: 'Certificate chain exists'
        404:
          handler: json_certificate_chain_exists
          message: 'Certificate chain not found'
flushagent:
  responses:
    404:
      handler: simple_error
      message: 'Flush agent %{name} not found on %{run_mode}'
  actions:
    create_update:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          jcrprimary_type: cq:Page
          jcrcontentcqname: '%{name}'
          jcrcontentjcrtitle: '%{title}'
          jcrcontentjcrdescription: '%{description}'
          jcrcontentslingresource_type: cq/replication/components/agent
          jcrcontenttransport_uri: '%{dest_base_url}/dispatcher/invalidate.cache'
          jcrcontentlog_level: '%{log_level}'
          jcrcontentno_versioning: true
          jcrcontentprotocol_http_headers:
            - 'CQ-Action:{action}'
            - 'CQ-Handle:{path}'
            - 'CQ-Path:{path}'
          jcrcontentprotocol_http_headers_type_hint: String[]
          jcrcontentprotocol_http_method: GET
          jcrcontentretry_delay: '%{retry_delay}'
          jcrcontentserialization_type: flush
          jcrcontentjcrmixin_types: cq:ReplicationStatus
          jcrcontenttrigger_receive: true
          jcrcontenttrigger_specific: true
          jcrcontentcqtemplate: /libs/cq/replication/templates/agent
          jcrcontentenabled: true
          jcrcontentssl: '%{ssl}'
      responses:
        200:
          handler: simple
          message: 'Flush agent %{name} updated on %{run_mode}'
        201:
          handler: simple
          message: 'Flush agent %{name} created on %{run_mode}'
    delete:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          operation: delete
      responses:
        200:
          handler: simple
          message: 'Flush agent %{name} deleted on %{run_mode}'
        204:
          handler: simple
          message: 'Flush agent %{name} deleted on %{run_mode}'
        403:
          handler: simple_error
          message: 'Flush agent %{name} not found on %{run_mode}'
    exists:
      api: sling
      operation: getAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
      responses:
        302:
          handler: simple_true
          message: 'Flush agent %{name} exists on %{run_mode}'
        403:
          handler: simple_false
          message: 'Flush agent %{name} not found on %{run_mode}'
        404:
          handler: simple_false
          message: 'Flush agent %{name} not found on %{run_mode}'
group:
  responses:
    404:
      handler: simple_error
      message: 'Group %{name} not found'
  actions:
    create:
      api: sling
      operation: postAuthorizables
      params:
        required:
          authorizable_id: '%{name}'
          intermediate_path: '%{path}'
        optional:
          create_group: ''
          profilegiven_name: '%{name}'
      responses:
        201:
          handler: html_authorizable_id
          message: 'Group %{name} created at %{path}/%{authorizable_id}'
    find_authorizable_id:
      api: sling
      operation: getQuery
      params:
        required:
          path: '%{path}'
          p_limit: '-1'
          _1_property: rep:authorizableId
          _1_property_value: '%{name}'
      responses:
        200:
          handler: json_authorizable_id
          message: 'Found group %{name} authorizable ID %{authorizable_id}'
        404:
          handler: simple_nil
          message: 'Group %{name} not found'
    delete:
      api: sling
      operation: postNode
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
        optional:
          delete_authorizable: ''
      responses:
        200:
          handler: simple
          message: 'Group %{name} deleted at %{path}/%{authorizable_id}'
        201:
          handler: simple
          message: 'Group %{name} deleted at %{path}/%{authorizable_id}'
        204:
          handler: simple
          message: 'Group %{name} deleted at %{path}/%{authorizable_id}'
    exists:
      api: sling
      operation: getNode
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
      responses:
        302:
          handler: simple_true
          message: 'Group %{name} exists at /%{path}/%{authorizable_id}'
        403:
          handler: simple_false
          message: 'Group %{name} not found'
        404:
          handler: simple_false
          message: 'Group %{name} not found'
    set_permission:
      api: cq
      operation: postCqActions
      params:
        required:
          authorizable_id: '%{name}'
          changelog: 'path:%{permission_path},%{permission_csv}'
      responses:
        200:
          handler: simple
          message: 'Permission %{permission_csv} on path %{permission_path} set for group %{name}'
    add_member:
      api: sling
      operation: postNodeRw
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
        optional:
          add_members: '%{member}'
      responses:
        200:
          handler: simple
          message: 'User/group %{member} added to group %{name}'
node:
  responses:
    404:
      handler: simple_error
      message: 'Node %{path}/%{name} not found'
  actions:
    create:
      api: sling
      operation: postPath
      params:
        required:
          path: '%{path}'
          jcrprimary_type: '%{type}'
          name: '%{name}'
      responses:
        201:
          handler: simple
          message: 'Node %{path}/%{name} created'
    delete:
      api: sling
      operation: postNode
      params:
        required:
          path: '%{path}'
          name: '%{name}'
        optional:
          operation: delete
      responses:
        200:
          handler: simple
          message: 'Node %{path}/%{name} deleted'
        201:
          handler: simple
          message: 'Node %{path}/%{name} deleted'
        204:
          handler: simple
          message: 'Node %{path}/%{name} deleted'
    exists:
      api: sling
      operation: getNode
      params:
        required:
          path: '%{path}'
          name: '%{name}'
      responses:
        302:
          handler: simple_true
          message: 'Node %{path}/%{name} exists'
        404:
          handler: simple_false
          message: 'Node %{path}/%{name} not found'
package:
  actions:
    create:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}'
          cmd: create
        optional:
          group_name: '%{group_name}'
          package_name: '%{package_name}'
          package_version: '%{package_version}'
          charset: utf-8
      responses:
        200:
          handler: json_package_service
        201:
          handler: json_package_service
    update:
      api: crx
      operation: postPackageUpdate
      params:
        required:
          groupName: '%{group_name}'
          packageName: '%{package_name}'
          version: '%{package_version}'
          path: '/etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
        optional:
          filter: '%{filter}'
          charset: utf-8
      responses:
        200:
          handler: json_package_service
    delete:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
          cmd: delete
      responses:
        200:
          handler: json_package_service
    build:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
          cmd: build
      responses:
        200:
          handler: json_package_service
    install:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
          cmd: install
        optional:
          recursive: '%{recursive}'
      responses:
        200:
          handler: json_package_service
        500:
          handler: html_package_service_allow_error
          message: 'Allowed package installation error - %{title}: %{desc} %{reason}'
    uninstall:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
          cmd: uninstall
      responses:
        200:
          handler: json_package_service
    replicate:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
          cmd: replicate
      responses:
        200:
          handler: json_package_service
    download:
      api: sling
      operation: getPackage
      params:
        required:
          group: '%{group_name}'
          name: '%{package_name}'
          version: '%{package_version}'
      responses:
        200:
          handler: package_file_download
          message: 'Package downloaded to %{file_path}/%{package_name}-%{package_version}.zip'
    upload:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: ''
          cmd: upload
        optional:
          force: '%{force}'
          package: __FILE_PACKAGE__
      responses:
        200:
          handler: json_package_service
    get_filter:
      api: sling
      operation: getPackageFilter
      params:
        required:
          group: '%{group_name}'
          name: '%{package_name}'
          version: '%{package_version}'
      responses:
        200:
          handler: json_package_filter
          message: 'Filter retrieved successfully'
    list_all:
      api: crx
      operation: postPackageService
      params:
        required:
          cmd: ls
      responses:
        200:
          handler: xml_package_list
          message: 'Package list retrieved successfully'
path:
  actions:
    activate:
      api: sling
      operation: postTreeActivation
      params:
        required:
          ignoredeactivated: '%{ignoredeactivated}'
          onlymodified: '%{onlymodified}'
          path: '%{name}'
      responses:
        200:
          handler: simple
          message: 'Path %{name} activated'
    delete:
      api: sling
      operation: postNode
      params:
        required:
          path: '%{path}'
          name: '%{name}'
        optional:
          operation: delete
      responses:
        200:
          handler: simple
          message: 'Path %{path} deleted'
        201:
          handler: simple
          message: 'Path %{path} deleted'
        204:
          handler: simple
          message: 'Path %{path} deleted'
configproperty:
  actions:
    createapachefelixjettybasedhttpservice:
      api: sling
      operation: postConfigApacheFelixJettyBasedHttpService
      params:
        required:
        optional:
          - org_apache_felix_https_nio
          - org_apache_felix_https_nio_type_hint
          - org_apache_felix_https_keystore
          - org_apache_felix_https_keystore_type_hint
          - org_apache_felix_https_keystore_password
          - org_apache_felix_https_keystore_password_type_hint
          - org_apache_felix_https_keystore_key
          - org_apache_felix_https_keystore_key_type_hint
          - org_apache_felix_https_keystore_key_password
          - org_apache_felix_https_keystore_key_password_type_hint
          - org_apache_felix_https_truststore
          - org_apache_felix_https_truststore_key_type_hint
          - org_apache_felix_https_truststore_password
          - org_apache_felix_https_truststore_password_type_hint
          - org_apache_felix_https_clientcertificate
          - org_apache_felix_https_clientcertificate_type_hint
          - org_apache_felix_https_enable
          - org_apache_felix_https_enable_type_hint
          - org_osgi_service_http_port_secure
          - org_osgi_service_http_port_secure_type_hint
          - json_maximumresults
          - json_maximumresults_type_hint
      responses:
        200:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
        201:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
    createapacheslinggetservlet:
      api: sling
      operation: postConfigApacheSlingGetServlet
      params:
        required:
        optional:
          - json_maximumresults
          - json_maximumresults_type_hint
          - enable_html
          - enable_html_type_hint
          - enable_txt
          - enable_txt_type_hint
          - enable_xml
          - enable_xml_type_hint
      responses:
        200:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
        201:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
    createapacheslingreferrerfilter:
      api: sling
      operation: postConfigApacheSlingReferrerFilter
      params:
        required:
        optional:
          - allow_empty
          - allow_empty_type_hint
          - allow_hosts
          - allow_hosts_type_hint
          - allow_hosts_regexp
          - allow_hosts_regexp_type_hint
          - filter_methods
          - filter_methods_type_hint
      responses:
        200:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
        201:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
    createapacheslingdavexservlet:
      api: sling
      operation: postConfigApacheSlingDavExServlet
      params:
        required:
        optional:
          - _alias
          - alias_type_hint
          - dav_create_absolute_uri
          - dav_create_absolute_uri_type_hint
      responses:
        200:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
        201:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
    createaempasswordresetactivator:
      api: custom
      operation: postConfigAemPasswordReset
      params:
        required:
        optional:
          - pwdreset_authorizables
          - pwdreset_authorizables_type_hint
      responses:
        200:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
        201:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
    createaemhealthcheckservlet:
      api: custom
      operation: postConfigAemHealthCheckServlet
      params:
        required:
        optional:
          - bundles_ignored
          - bundles_ignored_type_hint
      responses:
        200:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
        201:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
    createadobegranitesamlauthenticationhandler:
      api: sling
      operation: postConfigAdobeGraniteSamlAuthenticationHandler
      params:
        optional:
          - key_store_password
          - key_store_password_type_hint
          - service_ranking
          - service_ranking_type_hint
          - idp_http_redirect
          - idp_http_redirect_type_hint
          - create_user
          - create_user_type_hint
          - default_redirect_url
          - default_redirect_url_type_hint
          - user_id_attribute
          - user_id_attribute_type_hint
          - default_groups
          - default_groups_type_hint
          - idp_cert_alias
          - idp_cert_alias_type_hint
          - add_group_memberships
          - add_group_memberships_type_hint
          - path
          - path_type_hint
          - synchronize_attributes
          - synchronize_attributes_type_hint
          - clock_tolerance
          - clock_tolerance_type_hint
          - group_membership_attribute
          - group_membership_attribute_type_hint
          - idp_url
          - idp_url_type_hint
          - logout_url
          - logout_url_type_hint
          - service_provider_entity_id
          - service_provider_entity_id_type_hint
          - assertion_consumer_service_url
          - assertion_consumer_service_url_type_hint
          - handle_logout
          - handle_logout_type_hint
          - sp_private_key_alias
          - sp_private_key_alias_type_hint
          - use_encryption
          - use_encryption_type_hint
          - name_id_format
          - name_id_format_type_hint
          - digest_method
          - digestMethod_type_hint
          - signature_method
          - signature_method_type_hint
          - user_intermediate_path
          - user_intermediate_path_type_hint
      responses:
        200:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
        201:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
    createapachehttpcomponentsproxyconfiguration:
      api: sling
      operation: postConfigApacheHttpComponentsProxyConfiguration
      params:
        required:
        optional:
          - proxy_host
          - proxy_host_type_hint
          - proxy_port
          - proxy_port_type_hint
          - proxy_exceptions
          - proxy_exceptions_type_hint
          - proxy_enabled
          - proxy_enabled_type_hint
          - proxy_user
          - proxy_user_type_hint
          - proxy_password
          - proxy_password_type_hint
      responses:
        200:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
        201:
          handler: simple
          message: 'Set %{config_node_name} config %{type} property %{name}=%{value}'
replicationagent:
  responses:
    404:
      handler: simple_error
      message: 'Replication agent %{name} not found on %{run_mode}'
  actions:
    create_update:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          jcrprimary_type: cq:Page
          jcrcontentcqname: '%{name}'
          jcrcontentjcrtitle: '%{title}'
          jcrcontentjcrdescription: '%{description}'
          jcrcontentslingresource_type: cq/replication/components/agent
          jcrcontentserialization_type: durbo
          jcrcontenttransport_uri: '%{dest_base_url}/bin/receive?sling:authRequestLogin=1'
          jcrcontenttransport_user: '%{transport_user}'
          jcrcontenttransport_password: '%{transport_password}'
          jcrcontentlog_level: '%{log_level}'
          jcrcontentretry_delay: '%{retry_delay}'
          jcrcontentcqtemplate: /libs/cq/replication/templates/agent
          jcrcontentenabled: true
      responses:
        200:
          handler: simple
          message: 'Replication agent %{name} updated on %{run_mode}'
        201:
          handler: simple
          message: 'Replication agent %{name} created on %{run_mode}'
    delete:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          operation: delete
      responses:
        200:
          handler: simple
          message: 'Replication agent %{name} deleted on %{run_mode}'
        204:
          handler: simple
          message: 'Replication agent %{name} deleted on %{run_mode}'
        403:
          handler: simple_error
          message: 'Replication agent %{name} not found on %{run_mode}'
    exists:
      api: sling
      operation: getAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
      responses:
        302:
          handler: simple_true
          message: 'Replication agent %{name} exists on %{run_mode}'
        403:
          handler: simple_false
          message: 'Replication agent %{name} not found on %{run_mode}'
        404:
          handler: simple_false
          message: 'Replication agent %{name} not found on %{run_mode}'
outboxreplicationagent:
  responses:
    404:
      handler: simple_error
      message: 'Outbox replication agent %{name} not found on %{run_mode}'
  actions:
    create_update:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          jcrprimary_type: cq:Page
          jcrcontentcqname: '%{name}'
          jcrcontentjcrtitle: '%{title}'
          jcrcontentjcrdescription: '%{description}'
          jcrcontentslingresource_type: cq/replication/components/agent
          jcrcontenttransport_uri: repo://var/replication/outbox
          jcrcontentno_versioning: true
          jcrcontentlog_level: '%{log_level}'
          jcrcontentcqtemplate: /libs/cq/replication/templates/agent
          jcrcontentenabled: true
          jcrcontenttrigger_distribute: true
          jcrcontenttrigger_modified: false
          jcrcontenttrigger_specific: true
          jcrcontentuser_id: '%{user_id}'
      responses:
        200:
          handler: simple
          message: 'Outbox replication agent %{name} updated on %{run_mode}'
        201:
          handler: simple
          message: 'Outbox replication agent %{name} created on %{run_mode}'
    delete:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          operation: delete
      responses:
        200:
          handler: simple
          message: 'Outbox replication agent %{name} deleted on %{run_mode}'
        204:
          handler: simple
          message: 'Outbox replication agent %{name} deleted on %{run_mode}'
        403:
          handler: simple_error
          message: 'Outbox replication agent %{name} not found on %{run_mode}'
    exists:
      api: sling
      operation: getAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
      responses:
        302:
          handler: simple_true
          message: 'Outbox replication agent %{name} exists on %{run_mode}'
        403:
          handler: simple_false
          message: 'Outbox replication agent %{name} not found on %{run_mode}'
        404:
          handler: simple_false
          message: 'Outbox replication agent %{name} not found on %{run_mode}'
reversereplicationagent:
  responses:
    404:
      handler: simple_error
      message: 'Reverse replication agent %{name} not found on %{run_mode}'
  actions:
    create_update:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          jcrprimary_type: cq:Page
          jcrcontentcqname: '%{name}'
          jcrcontentjcrtitle: '%{title}'
          jcrcontentjcrdescription: '%{description}'
          jcrcontentslingresource_type: cq/replication/components/agent
          jcrcontentserialization_type: durbo
          jcrcontenttransport_uri: '%{dest_base_url}/bin/receive?sling:authRequestLogin=1'
          jcrcontenttransport_user: '%{transport_user}'
          jcrcontenttransport_password: '%{transport_password}'
          jcrcontentlog_level: '%{log_level}'
          jcrcontentretry_delay: '%{retry_delay}'
          jcrcontentcqtemplate: /libs/cq/replication/templates/agent
          jcrcontentenabled: true
          jcrcontentreverse_replication: true
      responses:
        200:
          handler: simple
          message: 'Reverse replication agent %{name} updated on %{run_mode}'
        201:
          handler: simple
          message: 'Reverse replication agent %{name} created on %{run_mode}'
    delete:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          operation: delete
      responses:
        200:
          handler: simple
          message: 'Reverse replication agent %{name} deleted on %{run_mode}'
        204:
          handler: simple
          message: 'Reverse replication agent %{name} deleted on %{run_mode}'
        403:
          handler: simple_error
          message: 'Reverse replication agent %{name} not found on %{run_mode}'
    exists:
      api: sling
      operation: getAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
      responses:
        302:
          handler: simple_true
          message: 'Reverse replication agent %{name} exists on %{run_mode}'
        403:
          handler: simple_false
          message: 'Reverse replication agent %{name} not found on %{run_mode}'
        404:
          handler: simple_false
          message: 'Reverse replication agent %{name} not found on %{run_mode}'
repository:
  actions:
    block_writes:
      api: console
      operation: postJmxRepository
      params:
        required:
          action: blockRepositoryWrites
      responses:
        200:
          handler: simple
          message: 'Repository writes blocked'
    unblock_writes:
      api: console
      operation: postJmxRepository
      params:
        required:
          action: unblockRepositoryWrites
      responses:
        200:
          handler: simple
          message: 'Repository writes unblocked'
saml:
  actions:
    get:
      api: console
      operation: postSamlConfiguration
      params:
        optional:
          post: true
      responses:
        200:
          handler: simple
          message: 'SAML Configuration found'
    create:
      api: console
      operation: postSamlConfiguration
      params:
        optional:
          - post
          - apply
          - delete
          - action
          - location
          - path
          - service_ranking
          - idp_url
          - idp_cert_alias
          - idp_http_redirect
          - service_provider_entity_id
          - assertion_consumer_service_url
          - sp_private_key_alias
          - key_store_password
          - default_redirect_url
          - user_id_attribute
          - use_encryption
          - create_user
          - add_group_memberships
          - group_membership_attribute
          - default_groups
          - name_id_format
          - synchronize_attributes
          - handle_logout
          - logout_url
          - clock_tolerance
          - digest_method
          - signature_method
          - user_intermediate_path
          - propertylist
      responses:
        200:
          handler: simple
          message: 'SAML Configuration found'
        302:
          handler: simple
          message: 'SAML Configuration created'
    delete:
      api: console
      operation: postSamlConfiguration
      params:
        optional:
          - apply
          - delete
      responses:
        200:
          handler: simple
          message: 'SAML Configuration successfully deleted'
truststore:
  responses:
    404:
      handler: simple_error
      message: 'Truststore not found'
  actions:
    create:
      api: sling
      operation: postTruststore
      params:
        optional:
          new_password: '%{password}'
          re_password: '%{password}'
          operation: createStore
      responses:
        200:
          handler: simple
          message: 'Truststore created'
        201:
          handler: simple
          message: 'Truststore created'
    upload:
      api: sling
      operation: post_truststore_pkcs12
      params:
        optional:
          truststore_p12: __FILE_PLAIN__
      responses:
        200:
          handler: simple
          message: 'Truststore uploaded'
        201:
          handler: simple
          message: 'Truststore uploaded'
    download:
      api: sling
      operation: getTruststore
      params:
        required:
      responses:
        200:
          handler: file_download
          message: 'Truststore downloaded to %{file_path}'
    delete:
      api: sling
      operation: postNode
      params:
        required:
          path: /etc/truststore/
          name: truststore.p12
        optional:
          operation: delete
      responses:
        200:
          handler: simple
          message: 'Truststore deleted'
        201:
          handler: simple
          message: 'Truststore deleted'
        403:
          handler: simple_error
          message: 'Truststore not found'
    exists:
      api: sling
      operation: getTruststoreInfo
      params:
        required:
      responses:
        200:
          handler: json_truststore_exists
          message: 'Truststore exists'
        404:
          handler: json_truststore_exists
          message: 'Truststore not found'
    info:
      api: sling
      operation: getTruststoreInfo
      params:
        required:
      responses:
        200:
          handler: simple_body
          message: 'Retrieved truststore info'
user:
  responses:
    404:
      handler: simple_error
      message: 'User %{name} not found'
  actions:
    create:
      api: sling
      operation: postAuthorizables
      params:
        required:
          authorizable_id: '%{name}'
          intermediate_path: '%{path}'
        optional:
          create_user: ''
          reppassword: '%{password}'
      responses:
        201:
          handler: html_authorizable_id
          message: 'User %{name} created at %{path}/%{authorizable_id}'
    find_authorizable_id:
      api: sling
      operation: getQuery
      params:
        required:
          path: '%{path}'
          p_limit: '-1'
          _1_property: rep:authorizableId
          _1_property_value: '%{name}'
      responses:
        200:
          handler: json_authorizable_id
          message: 'Found user %{name} authorizable ID %{authorizable_id}'
        404:
          handler: simple_nil
          message: 'User %{name} not found'
    delete:
      api: sling
      operation: postNode
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
        optional:
          delete_authorizable: ''
      responses:
        200:
          handler: simple
          message: 'User %{name} deleted at %{path}/%{authorizable_id}'
        201:
          handler: simple
          message: 'User %{name} deleted at %{path}/%{authorizable_id}'
        204:
          handler: simple
          message: 'User %{name} deleted at %{path}/%{authorizable_id}'
    exists:
      api: sling
      operation: getNode
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
      responses:
        302:
          handler: simple_true
          message: 'User %{name} exists at /%{path}/%{authorizable_id}'
        403:
          handler: simple_false
          message: 'User %{name} not found'
        404:
          handler: simple_false
          message: 'User %{name} not found'
    set_permission:
      api: cq
      operation: postCqActions
      params:
        required:
          authorizable_id: '%{name}'
          changelog: 'path:%{permission_path},%{permission_csv}'
      responses:
        200:
          handler: simple
          message: 'Permission %{permission_csv} on path %{permission_path} set for user %{name}'
    change_password:
      api: crx
      operation: postSetPassword
      params:
        required:
          old: '%{old_password}'
          plain: '%{new_password}'
          verify: '%{new_password}'
      responses:
        200:
          handler: html_change_password
          message: 'User %{user}''s password has been changed'
